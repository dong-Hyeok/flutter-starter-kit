import 'package:logger/logger.dart';
import 'package:http/http.dart' as http;

class LoggerService {
  static final LoggerService _instance = LoggerService._internal();
  final Logger _logger;

  factory LoggerService() {
    return _instance;
  }

  LoggerService._internal()
      : _logger = Logger(
          printer: PrettyPrinter(
            methodCount: 0,
            errorMethodCount: 3,
            lineLength: 120,
            colors: true,
            printEmojis: false,
          ),
        );

  static void logTrace(String message) {
    _instance._logger.t(message);
  }

  static void logDebug(String message) {
    _instance._logger.d(message);
  }

  static void logInfo(String message) {
    _instance._logger.i(message);
  }

  static void logWarning(String message) {
    _instance._logger.w(message);
  }

  static void logError(String message,
      [Object? error, StackTrace? stackTrace]) {
    _instance._logger.e(
      message,
      error: error,
      stackTrace: stackTrace,
    );
  }

  static void logFatal(String message) {
    _instance._logger.f(message);
  }

  static void logHttpRequest(Uri uri,
      {String method = '', String body = 'None'}) {
    logInfo('''[Http Request]
http Method: $method
http: uri: $uri
http: body: $body''');
  }

  static void logHttpResponse(http.Response response) {
    logDebug('''[Http Response]
http: status: ${response.statusCode}
http: body: ${response.body}''');
  }

  static Future<void> logMultipartRequest(
      Uri uri, http.MultipartRequest request) async {
    final fieldsString = request.fields.entries
        .map((entry) => 'http: field - ${entry.key}: ${entry.value}')
        .join('\n');

    final filesString = await Future.wait(request.files.map((file) async {
      final length = file.length;
      return '''
http: file field - ${file.field}
http: file filename - ${file.filename}
http: file contentType - ${file.contentType}
http: file length - $length''';
    })).then((fileInfos) => fileInfos.join('\n'));

    final logMessage = '''
------------------------Http Multipart Request Start-----------------------------
http Method: ${request.method}
http: uri: $uri
$fieldsString
$filesString
-------------------------Http Multipart Request End-----------------------------
''';

    logInfo(logMessage);
  }
}
